%class_name EBNFParser

%preface {
  import CitronParserModule
  import SourcesAndDiagnostics

  extension _CitronParserUnexpectedTokenError : CustomDebugStringConvertible {
    public var debugDescription: String {
      if let t = token as? EBNF.Token {
        return "\n\(t.position): error: unexpected token (\(t), tokenCode: \(tokenCode))"
      }
      return "error: unexpected token (\(token), tokenCode: \(tokenCode))"
    }
  }
}

%nonterminal_type grammar {EBNF.DefinitionList}
%nonterminal_type rule_list {EBNF.DefinitionList}
%nonterminal_type rule {EBNF.Definition}
%nonterminal_type kind {EBNF.Definition.Kind}
%nonterminal_type rhs_line {EBNF.Alternative}
%nonterminal_type rhs_list {EBNF.AlternativeList}
%nonterminal_type alt_list {EBNF.AlternativeList}
%nonterminal_type alt {EBNF.Alternative}
%nonterminal_type term_list {EBNF.TermList}
%nonterminal_type literal {EBNF.Term}
%nonterminal_type literal_list {EBNF.AlternativeList}
%nonterminal_type one_of_list {EBNF.AlternativeList}
%nonterminal_type term {EBNF.Term}

%start_symbol grammar
%token_type {EBNF.Token}

%left_associative OR.
%left_associative STAR PLUS QUESTION.
%right_associative IS_DEFINED_AS.

%token ILLEGAL_CHARACTER.
%token ONE_OF_KIND TOKEN_KIND REGEXP_KIND NO_IMPLICIT_WHITESPACE_KIND NO_NEWLINE_KIND.
%token QUOTED_LITERAL.

grammar ::= rule_list(l). {l}
rule_list ::= . {[]}
rule_list ::= rule_list(l) rule(r). {l + CollectionOfOne(r)}

rule ::= LHS(l) IS_DEFINED_AS kind(k) rhs_list(r).
{ .init(kind: k, lhs: .init(l), alternatives: r) }

rule ::= LHS(l) IS_DEFINED_AS ONE_OF_KIND one_of_list(r).
{ .init(kind: .oneOf, lhs: .init(l), alternatives: r) }

kind ::= . { .plain }
kind ::= TOKEN_KIND. { .token }
kind ::= REGEXP_KIND. { .regexp }

rhs_list ::= rhs_line(r). { [r] }
rhs_list ::= rhs_list(l) rhs_line(r). { l +  [r] }

rhs_line ::= alt_list(l) EOL. { l.count == 1 ? l[0] : [.group(l)] }
rhs_line ::= REGEXP(r) EOL. { [.regexp(r.text, position: .init(r.position))] }

literal ::= LITERAL(r). { .literal(String(r.text), position: .init(r.position)) }
one_of_list ::= literal(r). { [[r]] }
one_of_list ::= one_of_list(l) literal(r). { l + [[r]] }

alt_list ::= alt(a). {[a]}
alt_list ::= alt_list(l) OR alt(r). {l + CollectionOfOne(r)}

alt ::= term_list(t). {t}
alt ::= . {[]}
term_list ::= term(t). {[t]}
term_list ::= term_list(l) term(r). {l + CollectionOfOne(r)}
term ::= LPAREN alt_list(g) RPAREN. {.group(g)}
term ::= SYMBOL_NAME(s). {.symbol(.init(s))}
term ::= QUOTED_LITERAL(l). {
  .literal(
     l.text.dropFirst().dropLast().split(separator: "\\").joined(), 
     position: .init(l.position))
}

%token_set quantifier STAR PLUS QUESTION.
term ::= term(t) quantifier(q). {
  .quantified(t, q.text.first!, position: .init(t.position...q.position))
}

/* Local Variables: */
/* mode: lemon */
/* End: */
